apply plugin: 'kotlin-multiplatform'
apply plugin: 'kotlinx-serialization'
apply plugin: 'com.android.library'

android {
    compileSdkVersion(29)

    defaultConfig {
        minSdkVersion(21)
        targetSdkVersion(29)
    }

    // By default the android gradle plugin expects to find the kotlin source files in
    // the folder `main` and the test in the folder `test`. This is to be able place
    // the source code files inside androidMain and androidTest folders
    sourceSets {
        main {
            manifest.srcFile 'src/androidMain/AndroidManifest.xml'
            java.srcDirs = ['src/androidMain/kotlin']
            res.srcDirs = ['src/androidMain/res']
        }
        test {
            java.srcDirs = ['src/androidTest/kotlin']
            res.srcDirs = ['src/androidTest/res']
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        kotlinOptions {
            jvmTarget = "1.8"
        }
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }
}

kotlin {
    targets {
        fromPreset(presets.android, 'android')

        def iosPreset = presets.iosX64
        fromPreset(iosPreset, 'ios') {
            binaries {
                framework {
                    // Disable bitcode embedding for the simulator build.
                    if (iosPreset == presets.iosX64) {
                        embedBitcode("disable")
                    }
                }
            }
        }
    }

    sourceSets {
        all {
            languageSettings {
                useExperimentalAnnotation('kotlin.Experimental')
                useExperimentalAnnotation('kotlin.time.ExperimentalTime')
                useExperimentalAnnotation('kotlinx.coroutines.FlowPreview')
                useExperimentalAnnotation('kotlinx.coroutines.ExperimentalCoroutinesApi')
            }
        }

        commonMain.dependencies {
            api 'org.jetbrains.kotlin:kotlin-stdlib-common'
            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$coroutine_version"
            implementation "dev.icerock.moko:mvvm:$moko_mvvm_version"
            implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:$serializer_version"
            implementation "org.kodein.di:kodein-di-core:$kodein_version"
            implementation "org.kodein.di:kodein-di-erased:$kodein_version"
            implementation "io.ktor:ktor-client-core:$ktor_version"
            implementation "io.ktor:ktor-client-logging:$ktor_version"
        }

        androidMain.dependencies {
            implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
            implementation "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlin_version"
            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutine_version"
            implementation "androidx.lifecycle:lifecycle-extensions:$androidx_lifecycle_version"
            implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$serializer_version"
            implementation "io.ktor:ktor-client-android:$ktor_version"
            implementation "io.ktor:ktor-client-logging-jvm:$ktor_version"
        }

        iosMain.dependencies {
            implementation "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlin_version"
            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-native:$coroutine_version"
            implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-native:$serializer_version"
            implementation "io.ktor:ktor-client-ios:$ktor_version"
            implementation "io.ktor:ktor-client-logging-native:$ktor_version"
        }

        androidTest.dependencies {
            implementation kotlin('test')
            implementation kotlin('test-junit')
            implementation "io.mockk:mockk:$mockk_version"
        }

        commonTest.dependencies {
            implementation kotlin('test-common')
            implementation kotlin('test-annotations-common')
        }
    }
}


// This task attaches native framework built from ios module to Xcode project
// (see IosApp directory). Don't run this task directly,
// Xcode runs this task itself during its build process.
// Before opening the project from iosApp directory in Xcode,
// make sure all Gradle infrastructure exists (gradle.wrapper, gradlew).
task packForXCode {
    def buildType = project.findProperty("kotlin.build.type") ?: "DEBUG"
    dependsOn "link${buildType.toLowerCase().capitalize()}FrameworkIos"
    //dependsOn "linkMainDebugFrameworkIOS"

    doLast {
        def srcFile = kotlin.targets.ios.binaries.getFramework(buildType).outputFile
        def targetDir = getProperty("configuration.build.dir")
        copy {
            from srcFile.parent
            into targetDir
            include 'SharedCode.framework/**'
            include 'SharedCode .framework.dSYM'
        }
    }
}

task iosUnitTest {
    def device = project.findProperty("iosDevice")?.toString() ?: "iPhone 8"
    dependsOn kotlin.targets.ios.binaries.getTest('DEBUG').linkTaskName
    group = JavaBasePlugin.VERIFICATION_GROUP
    description = "Runs iOS tests on a simulator"

    doLast {
        def binary = kotlin.targets.ios.binaries.getTest('DEBUG').outputFile
        exec {
            commandLine 'xcrun', 'simctl', 'spawn', device, binary.absolutePath
        }
    }
}

// check.dependsOn iosTest

apply from: "../extras/jacoco.gradle"
apply from: "../extras/ktlint.gradle"
apply from: "../extras/detekt.gradle"
